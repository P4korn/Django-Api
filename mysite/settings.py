"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-f&j(7v4r0g0wv50e@827p1_dqx)!=on@8i_0fn0@_e6+)h=4bx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapi",
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    "mysite.middleware.custom_middleware.LogIPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
    },
    "formatters": {
        "detailed": {
            "format": "%(asctime)s | %(levelname)s | %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"], 
            "level": "INFO",
            "propagate": False,
        },
    },
}

import logging
logging.getLogger("django.server").propagate = False


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_STORAGE_BUCKET_NAME = 'django-bucket1212'
AWS_S3_REGION_NAME = 'ap-southeast-2'  # Region ของ S3 Bucket
AWS_QUERYSTRING_AUTH = False



# from decouple import config
# import ldap
# from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# # Load sensitive settings from environment variables
# AUTH_LDAP_SERVER_URI = config("LDAP_SERVER_URI")
# AUTH_LDAP_BIND_DN = config("LDAP_BIND_DN")
# AUTH_LDAP_BIND_PASSWORD = config("LDAP_BIND_PASSWORD")

# Base search
# AUTH_LDAP_USER_SEARCH = LDAPSearch(
#     config("LDAP_SEARCH_BASE"),
#     ldap.SCOPE_SUBTREE,
#     "(sAMAccountName=%(user)s)",
# )

# # Attribute and permissions mapping
# AUTH_LDAP_USER_ATTR_MAP = {
#     "first_name": "givenName",
#     "last_name": "sn",
#     "email": "mail",
#     "username": "uid",
#     "password" : "userPassword"
# }

# AUTH_LDAP_ALWAYS_UPDATE_USER = True
# AUTH_LDAP_CREATE_USERS = True

# # Optional: Group handling
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
#     "CN=Users,DC=diller,DC=com", ldap.SCOPE_SUBTREE, "(objectClass=group)"
# )
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_staff": "CN=Staff,OU=Groups,DC=diller,DC=com",
#     "is_superuser": "CN=Admins,OU=Groups,DC=diller,DC=com",
# }

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Logging for debugging
# import logging
# logger = logging.getLogger("django_auth_ldap")
# logger.addHandler(logging.StreamHandler())
# logger.setLevel(logging.DEBUG)



# JWT Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}



